2023/05/26
Roger: 
    - Started AWS Instance
    - root password: ubuntu
    - Cloned Roger's nvim and tmux setups (Hopefully this doesn't interfere with Seah's preferences)
    - Installed Miniforge3: - $ wget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh
        - Installed conda-lock
        
    - Cloned chipyard
        - Ran $ ./build-setup.sh riscv-tools, failed with sudo: yum: command not found at the end
        - Fixed $ ./build-setup.sh -s 6 -s 7 riscv-tools, to skip firesim stuff

    - For some reason riscv64-unknown-elf-gcc was not installed as part of the chipyard setup, so I installed it separately
        - $ sudo apt install gcc-riscv64-unknown-elf

2023/05/27
Roger:
    - Copied over Roger's Kimera install scripts (Need to push to github)
    - Installed gtsam w/ boost (maybe need to get Kimera working without boost)
    - Installed and compiled opencv. (Needed to increase local storage to 50GB)
    - Fixed install scripts and installed all

    - Tested CMake cross compilation with riscv-scratchpad. Must set the -fPIC flag
    - Tested Compiling DBoW2 to RISC-V. Just need to set -DCMAKE_TOOLCHAIN_FILE=riscv.cmake when first running cmake .. Failed when referencing shared library in opencv.

2023/05/29
Roger:
    - Trying to compile opencv's sources to riscv
        - /usr/lib/cmake/vtk-6.3/UseVTK.cmake
        - /usr/lib/x86_64-linux-gnu/cmake/gflags
        - /usr/lib/x86_64-linux-gnu/libz.so     (ver 1.2.11)
        - /usr/lib/x86_64-linux-gnu/libjpeg.so  (ver )
        - /usr/lib/x86_64-linux-gnu/libwebp.so  (ver encoder: 0x020e)
        - /usr/lib/x86_64-linux-gnu/libpng.so   (ver 1.6.37)
        - /usr/lib/x86_64-linux-gnu/libtiff.so  (ver 42 - 4.1.0)

        # Note: I think some or all of them are not needed for Kimera, maybe we can find a way to disable them?

    VTK: Let's try to skip this as we do not need visualization
    - Fixed g++ version extraction in vtk6-release/CMakeLists.txt

2023/05/30
Roger:
    - Found a good example for cross compilation: https://kubasejdak.com/how-to-cross-compile-for-embedded-with-cmake-like-a-champ
    - Error while running $ cmake -DCMAKE_TOOLCHAIN_FILE=riscv.make ..
        - ld: cannot find -lgcc, -lm, -lc etc.
        - Fix: $ conda activate /home/ubuntu/chipyard/.conda-env
    - Error while running cmake
        - export called with target "opencv_core" which requires target "zlib" that is not in any export set
        - According to https://stackoverflow.com/questions/5378528/install-export-problem-for-library-with-dependencies, we are exporting a static library while linking a shared library
        - Fix: run $ cmake -DWITH_JPEG=OFF -DWITH_PNG=OFF -DWITH_WEBP=OFF -DWITH_TIFF=OFF -DWITH_JASPER=OFF -DWITH_OPENEXR=OFF 
        - Did not fix zlib error as zlib is required. libprotobuf might also be required

2023/06/02
Roger:
    - Cloned zlib source code
    - zlib wrote their CMakeLists.txt file wrong (lines 11-15), so CMAKE_INSTALL_PREFIX cannot be set manually
    - Actually, opencv includes the source file for zlib and everything else, so we can just build from source. Only need to set -DBUILD_SHARED_LIBS=OFF
    - cmake .. now works
    - Error while compiling: INT_MAX was not declared in this scope
        - Fix: #include <limits.h> in message_lite.cc 
    - Error while compiling: No suitable threading library available in protobuf
        - No fix yet. Asking Sagar if it's possible to compile protobuf without pthreads
        - New probable cause. It seems like when we're compiling in RISCV, the UNIX flag is not set. I.e, cmake doesn't think our machine is UNIX
        - Fix: Set CMAKE_SYSTEM_NAME=Linux, also need to fix riscv.cmake to set CMAKE_SYSTEM_NAME
    - Error while compiling: std::round has not been declared in Eigen
        - We can either not use eigen in opencv or compiler Eigen from source
        - In opencv/cmake/OpenCVFindLibsPerf.cmake, it seems like opencv uses eigen from /usr/lib
        - Seems like eigen's source code is all in the .h files though
    - Error while running cmake: Crosscompiler does not compiler the test program. -rdynamic not recognized by riscv g++
        - Problem: We are setting the compiler id to GNU, which runs Linux-GNU.cmake, which sets CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS -rdynamic. Need a way to set compiler id. Or just ignore the test compile
        - The standard solution should be to set the CMAKE_TRY_COMPILER_TARGET_TYPE variable
        - Or better yet, set CMAKE_SYSTEM_NAME to Linux, but hack opencv to HAVE_PTHREADS

2023/06/04
Roger:
    - Set HAVE_PTHREAD=1 manually and CMAKE_SYSTEM_NAME=Generic
    - Compile error: protobuf/stubs/common.cc pthread_mutex errors 
        - Problem: We are sourcing chipyard/.conda-env/riscv-tools/riscv64-unknown-elf/include/pthread.h and _POSIX_THREADS is not defined

2023/06/05
Roger:
    - Abe help: We need to use riscv64-unknown-linux-gnu instead of riscv64-unknown-elf as our cross compiler. (Thanks Abe!)
    - We can probably set the toolchain file to be Linux GNU
    - Revert back to using /usr/include/eigen3 in OpenCV. Reverted all changes to opencv/cmake/OpenCVFindLibsPerf.cmake
    - Problem while compiling: zlib.h: No such file or directory
        - Fix: Install zlib in dependencies/local
        - Need to add dependencies local to include path
        - Wait, but zlib is already 3rd party
        - Fix: ocv_include_directories("/home/ubuntu/dependencies/local") somewhere in the CMake file
    - Error while compiling: In persistence.cpp: Comparing result of pointer addition and NULL
        - Fix: Cast pointer addition to size_t
    - Error while linking: cannot find -lgtk-3, -lgkd-3, -lpangocairo-1.0 -lpango-1.0 -lharfbuzz -latk-1.0 -lcairo-gobject -lcairo -lgdk_pixbuf -gio-2.0 -lgobject-2.0 -lglib-2.0 -lgthread-2.0
        - Fix: -DWITH_GTK=OFF
    - Current working CMake command: cmake -DCMAKE_INSTALL_PREFIX=/home/ubuntu/dependencies/local -DCMAKE_TOOLCHAIN_FILE=/home/ubuntu/dependencies/riscv.cmake -DBUILD_SHARED_LIB=OFF -DWITH_JPEG=OFF -DWITH_PNG=OFF -DWITH_WEBP=OFF -DWITH_TIFF=OFF -DWITH_JASPER=OFF -DWITH_OPENEXR=OFF -DWITH_GTK=OFF  ..

2023/06/06
Roger:
    - OpenCV now compiles
    - Compiling DBoW2
    - -DOpenCV_DIR=/home/ubuntu/dependencies/local/share/OpenCV
    - Problem: Seems like it's not building a static library
        - Fix: Should set LIB_SHARED to STATIC
    - DBoW2 now compiles
    - Compiling gtsam
        - Problem: Boost is again a problem
        - Fix: Compile boost: https://github.com/sizhuo-zhang/boost_1_62_0
        - Add include_directories("/home/ubuntu/dependencies/local") somewhere in the CMakefile
    - Error while compiling: error: '-march=native': ISA string must begin with rv32 or rv64
        - Problem, seems like march=native flag is wrong. See https://five-embeddev.com/toolchain/2019/06/26/gcc-targets/
        - Problem, it seems like cmake/GtsamBuildTypes.cmake explicitly set march=native
        - Fix: Set -DGTSAM_BUILD_WITH_MARCH_NATIVE=OFF -DBUILD_SHARED_LIBS=OFF
    - Finished compiling gtsam

    - Compiling OpenGV
    - Error while compiling: error: '-march=native': ISA string must begin with rv32 or rv64
        - Problem: opengv/CMakeLists.txt
        - Fix: set -march=rv64imafd
    - Problem while compiling: make -j4 hangs
        - Fix: Just be patient lol
    - Error while linking: 
        /home/ubuntu/chipyard/.conda-env/riscv-tools/bin/../lib/gcc/riscv64-unknown-linux-gnu/12.2.0/../../../../riscv64-unknown-linux-gnu/bin/ld: warning: cannot find entry symbol _start; defaulting to 0000000000031e20
        - Fix: Set -DBUILD_TESTS=OFF

2023/06/08
Roger:
    - Compiling Kimera-RPGO
    - Error while compiling: error: '-march=native': ISA string must begin with rv32 or rv64
        - Problem: we are not sourcing the correct GTSAM, which sets march=native
        - Fix: find_package(GTSAM) and find_package(GTSAM_UNSTABLE) with NO_DEFAULT_PATH
    - Error while linking: /home/ubuntu/chipyard/.conda-env/riscv-tools/bin/../lib/gcc/riscv64-unknown-linux-gnu/12.2.0/../../../../riscv64-unknown-linux-gnu/bin/ld: /home/ubuntu/dependencies/local/lib/libboost_serialization.a(basic_oserializer.o): relocation R_RISCV_HI20 against `_ZTVN5boost7archive6detail17basic_oserializerE' can not be used when making a shared object; recompile with -fPIC
        - Problem: Kimera-RPGO's CMakeLists.txt specifies that it is to be build a SHARED library
        - Fix: Add check to see if BUILD_SHARED_LIBS is ON
    - Error while linking: /home/ubuntu/chipyard/.conda-env/riscv-tools/bin/../lib/gcc/riscv64-unknown-linux-gnu/12.2.0/../../../../riscv64-unknown-linux-gnu/bin/ld: warning: cannot find entry symbol _start; defaulting to 000000000003cd90
        - Problem: Seems like -nostartfiles is breaking things
        - Fix: Remove -nostartfiles flag in riscv.cmake
    - Kimera-RPGO Done

    - Compiling Kimera-VIO
    - Kimera-VIO requires gflags and glog

    - Download gflags2.2: https://github.com/gflags/gflags/archive/refs/tags/v2.2.2.zip
    - Compile gflags: cmake -DCMAKE_TOOLCHAIN_FILE=/home/ubuntu/dependencies/riscv.cmake -DCMAKE_INSTALL_PREFIX=/home/ubuntu/dependencies/local -DBUILD_SHARED_LIBS=OFF -DINSTALL_SHARED_LIBS=OFF ..
    - Finish compiling gflags

    - Download glog0.3.5: https://github.com/google/glog/archive/refs/tags/v0.3.5.zip
    - Error while compiling: /home/ubuntu/dependencies/glog/src/googletest.h:586:35: error: ISO C++17 does not allow dynamic exception specifications
  586 | void* operator new[](size_t size) throw(std::bad_alloc) {
        - Problem: seems like c++17 is specified somewhere 
        - Fix: cmake -DCMAKE_TOOLCHAIN_FILE=/home/ubuntu/dependencies/riscv.cmake -DCMAKE_INSTALL_PREFIX=/home/ubuntu/dependencies/local -DBUILD_SHARED_LIBS=OFF -DINSTALL_SHARED_LIBS=OFF -DCMAKE_CXX_STANDARD=11 ..
    - Finish compiling gflags

    - Compiling Kimera-VIO
    - Add option to build static lib with BUILD_SHARED_LIBS=OFF
    - Force find_package path
    - Disable march=native flag
    - Error while compiling: error: '-march=native': ISA string must begin with rv32 or rv64
        - Problem: KimeraRPGOConfig.cmake find_package(GTSMA_UNSTABLE) does not force a path, so it's sourcing from /usr/local/lib
        - KimeraRPGOConfig.cmake is configured from Kimera-RPGO/cmake/KimeraRPGOConfig.cmake.in
        - Fix: Change Kimera-RPGO/cmake/KimeraRPGOConfig.cmake.in to have NO_DEFAULT_PATH

    - Error while compiling: 23 | #include <opencv2/viz/types.hpp>  // Just for color type.
        - Problem: OpenCV is not compiled with the VTK library so there is no viz
        - Can we disable viz in Kimera-VIO?

    - Download VTK: https://gitlab.kitware.com/vtk/vtk.git
    - git checkout tags/v6.3.0
    - Error while running cmake: Could not find a package configuration file provided by "VTKCompileTools" with any of the following names: VTKCompileToolsConfig.cmake vtkcompiletools-config.cmake
        - Seems like we're missing a file called vtkcompiletools-config.cmake. There is such a file in the master branch but not in the v6.3.0 branch
        - Correction, looking at the CMakeLists.txt file in v6.3.0, there is an option VTK_BUILD_COMPILE_TOOLS_ONLY option that seems to export a file VTKCompileTools.cmake file
        - Run cmake first with VTK_BUILD_COMPILE_TOOLS_ONLY=ON: cmake -DCMAKE_INSTALL_FREFIX=/home/ubuntu/dependencies/local -DVTK_BUILD_COMPILE_TOOLS_ONLY=ON .. && make -j4 install
        - Then delete build folder and mkdir build
        - Run cmake again
    - Error while running cmake: 

        /home/ubuntu/dependencies/vtk6.3/CMake/vtkModule.cmake(4684):  if(NOT ${_vtk_find_package_PACKAGE}_FOUND )
        /home/ubuntu/dependencies/vtk6.3/CMake/vtkModule.cmake(4685):  message(FATAL_ERROR Could not find the ${_vtk_find_package_PACKAGE} external dependency. )
        CMake Error at CMake/vtkModule.cmake:4685 (message):
          Could not find the OpenGL external dependency.
        Call Stack (most recent call first):
          CMake/vtkModule.cmake:5285 (vtk_module_find_package)
          Utilities/OpenGL/CMakeLists.txt:58 (vtk_module_third_party_external)

    - VTK seems to depend on a lot of things, maybe it's easier to just modify Kimera
        include/kimera-vio/mesh/MeshUtils.h
        include/kimera-vio/mesh/Mesh.h
        include/kimera-vio/visualizer/Display-definitions.h
        include/kimera-vio/visualizer/Visualizer3D-definitions.h
        include/kimera-vio/visualizer/OpenCvVisualizer3D.h
        src/visualizer/OpenCvVisualizer3D.cpp

    - We should disable mesher and visualizer completely
    





TODO: Try to compile everything into a static library
